; unlocker.clsp by yakuhito
;; used to unlock CATs that were previously bridged
(mod (
  CAT_MOD_HASH
  P2_CONTROLLER_PUZZLE_HASH_MOD_HASH
  MESSAGE_COIN_FIRST_CURRY_HASH
  MESSAGE_SOURCE_CHAIN
  MESSAGE_SOURCE_HASH ; source contract (wrapped CAT factory - which, in this case, is the wrapped CAT destroyer)
  message_coin_parent_id
  message_nonce_hash
  asset_id
  receiver
  asset_amount_b32
  my_puzzle_hash
  my_id
  locked_coin_proofs ; (list (locked_coin_parent_info . locked_coin_amount) ...)
  locked_coin_total_amount
)
  (include "condition_codes.clib")
  (include "curry.clib")
  (include "sha256tree.clib")

  (defun add_message_coin_assertions (
    message_coin_id
    my_id
    conditions_so_far
  )
    (c
      (list ASSERT_COIN_ANNOUNCEMENT (sha256 message_coin_id my_id))
      (c
        (list CREATE_COIN_ANNOUNCEMENT message_coin_id)
        conditions_so_far
      )
    )
  )

  (defun add_p2_announcements_for_coin (
    coin_id
    my_id
    delegated_puzzle_hash
    conditions_so_far
  )
    (c
      (list ASSERT_COIN_ANNOUNCEMENT (sha256 coin_id (sha256 my_id delegated_puzzle_hash)))
      (c
        (list CREATE_COIN_ANNOUNCEMENT (sha256 coin_id delegated_puzzle_hash))
        conditions_so_far
      )
    )
  )

  (defun-inline b32 (coin_id)
    (if (= (strlen coin_id) 32) coin_id (x))
  )

  (defun add_remaining_p2_announcements (
    locked_coin_puzzle_hash
    my_id
    remaining_pay_amount
    ((locked_coin_parent_info . locked_coin_amount) . remaining_locked_coin_proofs)
    conditions_so_far
  )
    (add_p2_announcements_for_coin
      (sha256
        (b32 locked_coin_parent_info)
        locked_coin_puzzle_hash
        locked_coin_amount
      ) ; locked coin id
      my_id
      (sha256tree ())
      (if remaining_locked_coin_proofs
        (add_remaining_p2_announcements
          locked_coin_puzzle_hash
          my_id
          (- remaining_pay_amount locked_coin_amount)
          remaining_locked_coin_proofs
          conditions_so_far
        )
        ; else
        (if (= remaining_pay_amount locked_coin_amount)
          conditions_so_far
          ; else
          (x)
        )
      )
    )
  )

  (defun add_p2_announcements (
    p2_controller_puzzle_hash_puzzle_hash
    p2_controller_puzzle_hash_inner
    my_id
    pay_amount
    total_amount
    receiver
    ((lead_locked_coin_paret_info . lead_locked_coin_amount) . remaining_locked_coin_proofs) ; locked_coin_proofs
    conditions_so_far
  )
    (add_p2_announcements_for_coin
      (sha256
        (b32 lead_locked_coin_paret_info)
        p2_controller_puzzle_hash_puzzle_hash
        lead_locked_coin_amount
      ) ; lead coin id
      my_id
      (sha256tree (list 1 (list
        (list CREATE_COIN receiver pay_amount)
        (list CREATE_COIN p2_controller_puzzle_hash_inner (if (> pay_amount total_amount) (x) (- total_amount pay_amount)))
      ))) ; delegated puzzle hash
      (if remaining_locked_coin_proofs
        (add_remaining_p2_announcements
          p2_controller_puzzle_hash_puzzle_hash
          my_id
          (- pay_amount lead_locked_coin_amount)
          remaining_locked_coin_proofs
          conditions_so_far
        )
        ; else
        (if (= pay_amount lead_locked_coin_amount)
          conditions_so_far
          ; else
          (x)
        )
      )
    )
  )

  ; main
  (add_message_coin_assertions
    (sha256
      (b32 message_coin_parent_id)
      (curry_hashes MESSAGE_COIN_FIRST_CURRY_HASH
        (sha256 2
          (sha256 1 MESSAGE_SOURCE_CHAIN)
          message_nonce_hash
        ) ; sha256tree of (SOURCE_CHAIN . NONCE)
        MESSAGE_SOURCE_HASH
        (sha256 1 my_puzzle_hash) ; destination
        (sha256 1
          (sha256tree (list receiver asset_id asset_amount_b32))
        ) ; message hash
      ) ; message coin puzzle hash
      0
    ) ; message coin id
    my_id
    (add_p2_announcements
      (if (= (* asset_id 1) 0)
        (curry_hashes P2_CONTROLLER_PUZZLE_HASH_MOD_HASH
          (sha256 1 my_puzzle_hash)
        )
        ; else 
        (curry_hashes CAT_MOD_HASH
          (sha256 1 CAT_MOD_HASH)
          (sha256 1 asset_id)
          (curry_hashes P2_CONTROLLER_PUZZLE_HASH_MOD_HASH
            (sha256 1 my_puzzle_hash)
          )
        )
      ) ; p2_controller_puzzle_hash_puzzle_hash
      (curry_hashes P2_CONTROLLER_PUZZLE_HASH_MOD_HASH
        (sha256 1 my_puzzle_hash)
      ) ; p2_controller_puzzle_hash_inner
      my_id ; my_id
      (* 1 asset_amount_b32) ; pay_amount
      locked_coin_total_amount ; total_amount
      receiver
      locked_coin_proofs
      (list
        (list ASSERT_MY_COIN_ID my_id)
        (list ASSERT_MY_PUZZLEHASH my_puzzle_hash)
      ) ; conditions_so_far
    )
  )
)
