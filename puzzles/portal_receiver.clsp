; portal_receiver.clsp by yakuhito
;; used to receive messages via the portal

;; LAST_NONCES is here to make sure validator sigs for a 'chain' of nonce confirmations
;; are invalidated because the coin ids will be different (caused by different puzzle hashes)

(mod (
    VALIDATOR_INFO
    MESSAGE_COIN_MOD_HASH ; after 1st curry
    SELF_HASH
    LAST_NONCES
    new_puzzle_hash ; inner puzzle hash or ()
    ; msg info
    nonces ; (list nonce1 nonce2 ... )
    msg_infos ; (list (list validator_sig_switches sender target is_puzzle_hash deadline message) ... )
  )

  (include condition_codes.clib)
  (include sha256tree.clib)
  (include validator_sigs.clib)
  (include curry.clib)

  (defun process_messages (
    (nonce . remaining_nonces)
    (validator_sig_switches sender target is_puzzle_hash deadline message)
    remaining_msg_infos
  )
    (verify_validator_sigs
      VALIDATOR_INFO
      validator_sig_switches
      (sha256tree
        (list
          new_puzzle_hash
          nonce
          sender target is_puzzle_hash deadline message
        )
      )
      (c
        (list CREATE_COIN (curry_hashes_inline MESSAGE_COIN_MOD_HASH
            (sha256 1 sender)
            (sha256 1 target)
            (sha256 1 is_puzzle_hash)
            (sha256 1 deadline)
            (sha256 1 (sha256tree message)) ; message was revealed on-chain
          ) 0)
          (if remaining_msg_infos
            (process_messages remaining_nonces (f remaining_msg_infos) (r remaining_msg_infos))
            ; else 
            ()
          )
      )
    )
  )

  (c
    (list
      CREATE_COIN
      (if (= new_puzzle_hash ())
        (curry_hashes_inline SELF_HASH
          (sha256 1 SELF_HASH)
          (sha256tree LAST_NONCES)
        )
        ; else
        new_puzzle_hash
      )
      1
    ) ; re-create
    (process_messages nonces (f msg_infos) (r msg_infos)) 
  )
)
